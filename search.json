[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Análise da inflação do Brasil",
    "section": "",
    "text": "Coleta\nAgora já temos uma forma de importar os dados do IPCA direto no R! Entretanto, vamos analisar o que importamos:\n\ndplyr::glimpse(ipca_raw)\n\nRows: 514\nColumns: 11\n$ `Nível Territorial (Código)` <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"…\n$ `Nível Territorial`          <chr> \"Brasil\", \"Brasil\", \"Brasil\", \"Brasil\", \"…\n$ `Unidade de Medida (Código)` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ `Unidade de Medida`          <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ Valor                        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Brasil (Código)`            <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"…\n$ Brasil                       <chr> \"Brasil\", \"Brasil\", \"Brasil\", \"Brasil\", \"…\n$ `Variável (Código)`          <chr> \"2265\", \"2265\", \"2265\", \"2265\", \"2265\", \"…\n$ Variável                     <chr> \"IPCA - Variação acumulada em 12 meses\", …\n$ `Mês (Código)`               <chr> \"197912\", \"198001\", \"198002\", \"198003\", \"…\n$ Mês                          <chr> \"dezembro 1979\", \"janeiro 1980\", \"feverei…\n\n\nHá diversas colunas, com dados que não possuem importância para a nossa análise, bem como possuem colunas em que os tipos de dados estão totalmente errados! Devemos criar uma forma do R conseguir ler corretamente. Partimos para o processo de limpeza e tratamento.\n\n\nLimpeza e Tratamento\n\n# Limpeza do IPCA\n\n# Data de início das séries\ndata_inicio <- lubridate::as_date(\"2004-01-01\")\n\nipca <- ipca_raw |> \n  dplyr::select(\"data\" = \"Mês (Código)\", \"ipca\" = \"Valor\") |> \n  dplyr::mutate(data = lubridate::ym(data)) |> \n  dplyr::filter(data >= data_inicio)  |> \n  dplyr::as_tibble()\n\n\n\nLimpeza e Tratamento\nVeja o código acima, parece um pouco complicado, certo? Vamos explicar um pouco o que está acontecendo.\nEm primeiro lugar, colocamos o nome do objeto ipca_raw, em seguida um símbolo |> e depois uma função. O que aconteceu aqui? Estamos utilizando o operador pipe do R, que permite colocarmos tudo o que está do lado esquerdo (isto é, o resultado) dentro do primeiro argumento da função da próxima linha.\nO primeiro argumento da função select() é um argumento que especifica qual o objeto com dados deverá ser utilizado, no caso, ipca_raw. O operador ajuda a criarmos uma sequência de códigos limpa e fácil de ler.\nSeguindo o processo, iremos utilizar a função select()do pacote dplyr, que vai permitir escolhermos quais as colunas que queremos selecionar do data frame importado. No caso, selecionamos 2 colunas: Mês (Código) e Valor, veja que selecionamos utilizando aspas e também colocando “data” e “ipca” como valores iguais as colunas. Utilizamos isso para encurtar o caminho: estamos alterando o nome das colunas selecionadas para data e ipca, ou seja, além de selecionar colunas a função select permite alterar o nome das mesmas.\n\n\nLimpeza e Tratamento\nEm seguida, utilizamos pipe novamente, colocando o resultado da linha dentro da função da próxima linha: mutate(). A função mutate() permite alterar as observações das colunas do data frame. Aqui, utilizaremos a função ym do pacote lubridate para alterar os dados da coluna data para o tipo date (está em formato character).\nLogo após, vamos aplicar um filtro de dados no data frame com a função filter(). Queremos dados a partir de 2004-01-01, que está salvo no objeto data_inicio. Para isso, dentro da função filter() colocamos que queremos os valores da coluna data >= (maior e igual) que data_inicio (2004-01-01).\nPor fim, utilizamos a função as_tibble para alterar a estrutura de dados (a classe) do objeto para tibble, que é uma classe similar ao data frame usual, entretanto com mais informações.\n\n\nExploração dos Dados\nVamos começar com a função summary(), que permite calcular os cinco números dos valores do IPCA. Vemos que o valor mínimo do IPCA Acumulado em 12 meses foi de 1.88%, enquanto o valor máximo foi de 12.13%. A mediana dos valores durante o período está em 5.69%.\n\nsummary(ipca)\n\n      data                 ipca       \n Min.   :2004-01-01   Min.   : 1.880  \n 1st Qu.:2008-09-01   1st Qu.: 4.310  \n Median :2013-05-01   Median : 5.690  \n Mean   :2013-05-01   Mean   : 5.838  \n 3rd Qu.:2018-01-01   3rd Qu.: 6.760  \n Max.   :2022-09-01   Max.   :12.130  \n\n\nPodemos entender o comportamento do indicador ao longo do tempo através de uma gráfico de linha, com a data no eixo x e o IPCA no eixo y. Para construir, utilizamos o pacote {ggplot2}, com as suas funções. Primeiro criamos a camada do gráfico com ggplot(), em seguida, criamos a camada das coordenadas dos dados do gráfico com aes(), depois construído o gráfico de linha com geom_line(), e por fim, adicionamos geom_smooth() para criar uma linha que mensura a tendência do indicador ao longo da série.\n\n# Gráfico de linha\nipca |> \n  ggplot2::ggplot() +\n  ggplot2::aes(x = data, y = ipca) +\n  ggplot2::geom_line()\n\n\n\n\nCom o Histograma podemos analisar a distribuição dos dados. Vemos que os valores se encontram próximo do valor 5% e 6%, com uma cauda alongada para a direita, com pontos extremos positivos, significando menores frequências de acontecimento\n\n# Gráfico de histograma do IPCA\nipca |> \n  ggplot2::ggplot() +\n  ggplot2::aes(x = ipca) +\n  ggplot2::geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nHoje descobrimos o quão fácil é analisar a Taxa de Inflação do Brasil. Para aprofundamentos, é possível analisar outras janelas de variações (mensal, semestral, anual), além de dar um passo adiante e iniciar a etapa de modelagem. Até a próxima!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Coletando dados do Banco Central com o Python",
    "section": "",
    "text": "O python-bcb é uma interface em Python estruturada para obter informações da API de dados abertos do Banco Central do Brasil, criado por Wilson Freitas.\nA interface oferece diversas APIs que permitem acessar os dados de vários bancos de dados do BACEN. Sendo eles: - Sistema Gerenciado de Séries Temporais (SGS); - Conversor de moedas; - Expectativas divulgadas pelo boletim FOCUS; - Integração com o OData, fornecendo dados de Expectativas, Moedas, Taxas de Juros, IFdata e Mercado Imobiliário.\n\nSistema Gerenciador de Séries Temporais\nO SGS consolida e divulga diversas séries economicos-finaceiros mantidas pelo Banco Central e também por outras instituições. É nesse gerenciador que podemos encontrar as séries de diversos temas: Atividade Econômica, Preços, Mercado de Trabalho, Setor Externo, Finanças Públicas, Juros e etc.\nSão ofertadas as séries em diferentes periodicidades e formatos, portanto, somando todos os fatores, se torna um sistema ideal para coletar séries, ainda mais quando o próprio BCB oferece APIs que facilitam a extração.\nPara buscar uma série do SGS com o python-bcb, seguiremos os seguintes passos:\n\nImportar a API sgs do python-bcb no Python;\nBuscar o código da série no site https://www3.bcb.gov.br/sgspub/localizarseries/localizarSeries.do?method=prepararTelaLocalizarSeries;\nUtilizar a função sgs.get(), especificando o código e o período de interesse.\n\n\n# Importa as biblioteca\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\nComo exemplo, utilizamos a série da Taxa de juros - Meta Selic definida pelo Copom %a.a, identificada pelo código 432 no SGS. Vemos abaixo como é possível utilizar a função sgs.get().\n\nfrom bcb import sgs\n\n# Busca a série da SELIC no SGS\nselic = sgs.get({'selic':432}, start = '2010-01-01')\n\n\n# Plota\nsns.set_theme()\nselic.plot(figsize = (15, 10))\n\n<AxesSubplot: xlabel='Date'>\n\n\n\n\n\nViram como é fácil importar dados do SGS? Vamos ficar por aqui. Até a próxima!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Análise Macro",
    "section": "",
    "text": "inflação\n\n\nR\n\n\nanálise\n\n\nipca\n\n\n\n\n\n\n\n\n\n\n\nJan 10, 2024\n\n\nLuiz Henrique\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nbanco central\n\n\ndados\n\n\npython\n\n\nsgs\n\n\nselic\n\n\n\n\n\n\n\n\n\n\n\nJan 10, 2024\n\n\nLuiz Henrique\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "A boa aceitação desses exercícios nos fez perceber que nossos alunos, professores e profissionais de mercado têm grande interesse por ferramentas estatísticas e econométricas. Eles simplesmente adoram ver como a teoria pode andar em conjunto com os dados! Não tivemos dúvidas: era hora de ofertar um curso de introdução à análise de dados que fosse diferente, que fizesse a ponte entre a teoria e a prática, que fosse aplicado e intuitivo para quem nunca teve contato, nem jamais pensou em aprender esse tipo de coisa. Nasceu o nosso carro-chefe: o Curso de Introdução ao R com aplicações em Análise de Conjuntura. Com mais de 2.000 alunos formados, temos enorme prazer em perceber o impacto que o R, a linguagem criada para data analysis, teve em suas vidas.\nO passo seguinte é esse que você está vendo, leitor: o blog virou uma empresa que pretende contribuir para a melhoria de desempenho de cada vez mais estudantes, professores e profissionais de mercado. Queremos fazer parte de uma revolução: mostrar para as pessoas que a verdade está nos dados. Sempre esteve. E para ter acesso a ela é preciso ter domínio sobre as etapas de coleta, tratamento, análise e apresentação de dados. Nossa missão é, portanto, lhe ajudar nesse processo. Para isso, temos cursos pré-formatados que são ofertados de maneira on-line, ministramos cursos na modalidade in company, oferecemos consultoria customizada para necessidades específicas e criamos o Clube do Código, local onde são divulgados todos os códigos de nossos relatórios, apresentações e exercícios."
  }
]